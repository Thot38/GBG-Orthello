package games.RubiksCube;

import java.io.IOException;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;

import games.StateObservation;
import games.RubiksCube.CubieTriple.Orientation;

/**
 * Class CubeState represents a certain cube state. It comes in four different types (member {@code type}):
 * <ul>
 * <li> <b>POCKET</b>: color representation of a 2x2x2 pocket cube
 * <li> <b>RUBIKS</b>: color representation of a 3x3x3 Rubik's cube
 * <li> <b>TRAFO_P</b>: transformation representation for pocket cube
 * <li> <b>TRAFO_R</b>: transformation representation for Rubik's cube
 * </ul>
 * Its member {@code fcol} has 24 or 48 elements for pocket and Rubik's cube, resp. 
 * It stores in the case of a <b>color representation</b> type in {@code fcol[i]} the color of 
 * cubie face i, which is one out of {0,1,2,3,4,5} for colors {w,b,o,y,g,r} = 
 * {white,blue,orange,yellow,green,red}. For transformation representation type TRAFO_* see below.
 * <p>
 * Its member {@code lastTwist} stores the last twist action (U,L,F) performed on this cube
 * (ID if none or not known).
 * <p>
 * Its member {@code twistSequence} stores the twist sequence needed for generating this 
 * state from the default cube {@code def}, e.g. "L2U1" for {@code def.LTw(2).UTw(1)}. <br>
 * ({@code twistSequence=""} if the twist sequence is not known, e.g. because CubeState was 
 * generated by color symmetry transformation) 
 * <p>
 * CubeState has member functions {@link #uTr(int)}, {@link #lTr(int)}, {@link #fTr(int)} for whole-cube 
 * rotations and {@link #UTw(int)}, {@link #LTw(int)}, {@link #FTw(int)} for cube twists. 
 * <p>
 * More details:
 * <p>
 * Two CubeState objects are <b>equal</b>, if their {@code fcol[]} arrays have the same content. 
 * To get the corresponding sameness-behaviour when using {@link HashSet#add(Object)} 
 * and {@link Hashtable#get(Object)}, the functions {@link #equals(Object)} 
 * <b>AND</b> {@link #hashCode()} from class Object have to be 
 * overridden here.
 * <p>
 * If CubeState {@code trafo} is of <b>transformation representation</b> type TRAFO_*, then  
 * {@code trafo.fcol[i]} stores the location (number) of the parent cubie face.
 * That is, if {@code trafo}  is applied to another color-type CubeState cS, the color of cS.fcol[i] 
 * will become {@code cS.fcol[trafo.fcol[i]]}. See {@link #apply(CubeState)}.
 * <p> 
 * The numbering in {@code fcol} runs around the cube faces in the following order: U,L,F,D,R,B. 
 * Within the first three faces, we start at the wbo-cubie; within the last three faces we start
 * at the ygr-cubie. Within each face we march around in counter-clockwise
 * orientation. This gives for the pocket cube the following numbering:
 * <pre>
 *       3  2				
 *       0  1				
 * 5  4  8 11 18 17 23 22
 * 6  7  9 10 19 16 20 21
 *      14 13				
 *      15 12				
 * </pre>
 * 
 * @author Wolfgang Konen, TH Köln, Feb'18
 */
public class CubeState implements Serializable {
	
	public static enum Type {POCKET,RUBIKS,TRAFO_P,TRAFO_R};
	public static enum Twist {ID,U,L,F};
	
	public int[] fcol;   // fcol[i] holds the face color (or location) for cubie face no. i 

	Type type = Type.POCKET;
	Twist lastTwist = Twist.ID;
	int lastTimes = 0;
	String twistSeq = "";   // e.g. "L2U1" means that 
							//		(new CubeState()).LTw(2).UTw(1) 
							// produces this. ("": not known).
	int minTwists = -1;		// minimum number of twists needed to solve this state (-1: not known)
	
	/**
	 * change the version ID for serialization only if a newer version is no longer 
	 * compatible with an older one (older .agt.zip will become unreadable or you have
	 * to provide a special version transformation)
	 */
	private static final long  serialVersionUID = 12L;

	/**
	 * default (solved) cube of type POCKET
	 */
	public CubeState() {
		this(Type.POCKET);
	}
	
	public CubeState(Type type) {
		this.type = type;
		switch(type) {
		case POCKET: 
			this.fcol = new int[] {0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5};
			break;
		case RUBIKS:
			this.fcol = new int[] {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,
								   3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5};
			break;
		case TRAFO_P:
			// fcol[i] holds the parent of location i under the trafo represented by this CubeState object.
			// Initially this trafo is the id transformation for the pocket cube.
			this.fcol = new int[24];
			for (int i=0; i<fcol.length; i++) this.fcol[i] = i;
			break;
		case TRAFO_R:
			// fcol[i] holds the parent of location i under the trafo represented by this CubeState object.
			// Initially this trafo is the id transformation for the Rubik's cube.
			this.fcol = new int[48];
			for (int i=0; i<fcol.length; i++) this.fcol[i] = i;
			break;
		}
	}
	
	public CubeState(int[] fcol) {
		switch(fcol.length) {
		case 24: 
			this.type = Type.POCKET;
			break;
		case 48:
			this.type = Type.RUBIKS;
		}
		this.fcol = fcol.clone();
	}
	
	/**
	 * Copy constructor
	 * @param cs
	 */
	public CubeState(CubeState cs) {
		this.type = cs.type;
		this.lastTwist = cs.lastTwist;
		this.lastTimes = cs.lastTimes;
		this.twistSeq = cs.twistSeq;
		this.minTwists = cs.minTwists;
		this.fcol = cs.fcol.clone();
	}
	
	/**
	 * Whole-cube rotation counter-clockwise around the u-face
	 */
	private CubeState uTr() {
		int i;
		// fcol(invT[i]) is the color which cubie face i gets after transformation:
		int[] invT = {3,0,1,2,22,23,20,21,5,6,7,4,13,14,15,12,10,11,8,9,19,16,17,18};
		int[] tmp = this.fcol.clone();
		for (i=0; i<invT.length; i++) tmp[i] = this.fcol[invT[i]];
		for (i=0; i<invT.length; i++) this.fcol[i] = tmp[i]; 
		return this;
	}

	/**
	 * Whole-cube rotation counter-clockwise around the f-face
	 */
	private CubeState fTr() {
		int i;
		// fcol(invT[i]) is the color which cubie face i gets after transformation:
		int[] invT = {18,19,16,17,1,2,3,0,11,8,9,10,6,7,4,5,15,12,13,14,21,22,23,20};
		int[] tmp = this.fcol.clone();
		for (i=0; i<invT.length; i++) tmp[i] = this.fcol[invT[i]];
		for (i=0; i<invT.length; i++) this.fcol[i] = tmp[i]; 
		return this;
	}

	/**	
	 * Whole-cube rotation counter-clockwise around the l-face
	 */
	private CubeState lTr() {
		return this.fTr().uTr(3).fTr(3);
	}
	
	/**
	 * Whole-cube rotation, {@code times} * 90° counter-clockwise around the u-face
	 */
	public CubeState uTr(int times) {
		for (int i=0; i<times; i++) this.uTr();
		return this;
	}
	
	/**
	 * Whole-cube rotation, {@code times} * 90° counter-clockwise around the l-face
	 */
	public CubeState lTr(int times) {
		for (int i=0; i<times; i++) this.lTr();
		return this;
	}
	
	/**
	 * Whole-cube rotation, {@code times} * 90° counter-clockwise around the f-face
	 */
	public CubeState fTr(int times) {
		for (int i=0; i<times; i++) this.fTr();
		return this;
	}
	
	/**
	 * 	 Counter-clockwise twist of the U-face
	 */
	private CubeState UTw() {
		int i;
		// fcol(invT[i]) is the color which cubie face i gets after transformation:
		//            0        4          8         12           16          20
		int[] invT = {3,0,1,2, 22,23,6,7, 5,9,10,4, 12,13,14,15, 16,11,8,19, 20,21,17,18};
		int[] tmp = this.fcol.clone();
		for (i=0; i<invT.length; i++) tmp[i] = this.fcol[invT[i]];
		for (i=0; i<invT.length; i++) this.fcol[i] = tmp[i]; 
		this.lastTwist=Twist.U;
		return this;
		//
		// use the following line once on a default TRAFO_P CubeState to generate int[] invT above:
//		return this.lTr().lTr().lTr().FTw().lTr();   	// U(x) = l(F(l^3(x))) 
	}
	
	/**
	 * 	 Counter-clockwise twist of the L-face
	 */
	private CubeState LTw() {
		int i;
		// fcol(invT[i]) is the color which cubie face i gets after transformation:
		//            0        4        8            12           16           20
		int[] invT = {9,1,2,8, 7,4,5,6, 14,15,10,11, 12,13,21,22, 16,17,18,19, 20,3,0,23};
		int[] tmp = this.fcol.clone();
		for (i=0; i<invT.length; i++) tmp[i] = this.fcol[invT[i]];
		for (i=0; i<invT.length; i++) this.fcol[i] = tmp[i]; 
		this.lastTwist=Twist.L;
		return this;
		//
		// use the following line once on a default TRAFO_P CubeState to generate int[] invT above:
//		return this.uTr().FTw().uTr().uTr().uTr();   	// L(x) = u^3(F(u(x))) 
	}

	/**
	 * 	 Counter-clockwise twist of the F-face
	 */
	private CubeState FTw() {
		int i;
		// fcol(invT[i]) is the color which cubie face i gets after transformation:
		int[] invT = {18,19,2,3,1,5,6,0,11,8,9,10,12,7,4,15,16,17,13,14,20,21,22,23};
		int[] tmp = this.fcol.clone();
		for (i=0; i<invT.length; i++) tmp[i] = this.fcol[invT[i]];
		for (i=0; i<invT.length; i++) this.fcol[i] = tmp[i]; 
		this.lastTwist=Twist.F;
		return this;
	}
	
	/**
	 * U-face twist, counter-clockwise {@code times} * 90° 
	 */
	public CubeState UTw(int times) {
		for (int i=0; i<times; i++) this.UTw();
		this.twistSeq = this.twistSeq + "U"+times;
		this.lastTimes = times;
		return this;
	}
	
	/**
	 * L-face twist, counter-clockwise {@code times} * 90° 
	 */
	public CubeState LTw(int times) {
		for (int i=0; i<times; i++) this.LTw();
		this.twistSeq = this.twistSeq + "L"+times;
		this.lastTimes = times;
		return this;
	}
	
	/**
	 * F-face twist, counter-clockwise {@code times} * 90° 
	 */
	public CubeState FTw(int times) {
		for (int i=0; i<times; i++) this.FTw();
		this.twistSeq = this.twistSeq + "F"+times;
		this.lastTimes = times;
		return this;
	}
	
	/**
	 * Apply transformation trafo to this
	 * @param trafo a {@link CubeState} object of type TRAFO_P or TRAFO_R
	 * @return 
	 */
	public CubeState apply(CubeState trafo) {
		assert(trafo.type==Type.TRAFO_P || this.type==Type.TRAFO_R) : "Wrong type in apply(trafo) !";
		int i;
		int[] tmp = this.fcol.clone();
		for (i=0; i<fcol.length; i++) tmp[i] = this.fcol[trafo.fcol[i]];
		for (i=0; i<fcol.length; i++) this.fcol[i] = tmp[i]; 
		return this;		
	}
	
	/**
	 * Apply color transformation cT to {@code this}. {@code this} has to be of 
	 * type POCKET or RUBIKS. 
	 * @param cT
	 * @return
	 */
	public CubeState applyCT(ColorTrafo cT) {
		assert(this.type==Type.POCKET || this.type==Type.RUBIKS) : "Wrong type in apply(cT) !";
		for (int i=0; i<fcol.length; i++) this.fcol[i] = cT.fcol[this.fcol[i]];
		return this;		
	}
	
	/**
	 * Locate the cubie with the colors of {@link CubieTriple} {@code tri} in {@code this}. 
	 * {@code this} has to be of type POCKET or RUBIKS.
	 * @param tri
	 * @return a {@link CubieTriple} whose member {@code loc} carries the location of the cubie with 
	 * 		   the colors of {@code tri}.
	 */
	public CubieTriple locate(CubieTriple tri) {
		CubieTriple where = new CubieTriple(tri);
		assert(this.type==Type.POCKET || this.type==Type.RUBIKS) : "Wrong type in apply() !";
		//            0           4          8          12         16          20 
		int[] left = {4,11,17,22, 8,3,21,14, 0,7,13,18, 20,19,9,6, 12,23,1,10, 16,15,5,2};
		int[] right= {8,18,23,5, 0,22,15,9, 4,14,19,1, 16,10,7,21, 20,2,11,13, 12,6,3,17};
		int rig;
		switch(tri.ori) {
		case CLOCK: 
			for (int i=0; i<fcol.length; i++) {
				if (fcol[i]==tri.col[0]) {
					where.loc[0]=i;
					rig = right[i];
					if (fcol[rig]==tri.col[1]) {
						where.loc[1]=rig;
						rig = right[rig];
						if (fcol[rig]==tri.col[2]) {
							where.loc[2]=rig;
							return where; 
						}
					}
				}
			}
			break;
		case COUNTER:
			throw new RuntimeException("Case COUNTER not yet implemented");
		}
		throw new RuntimeException("Invalid cube, we should not arrive here!");
	}

	public int[] getBoardVector() {
		int[] bvec;
		switch (CubeConfig.stateCube) {
		case CUBESTATE: 
			bvec = fcol.clone();
			break;
		case CUBEPLUSACTION:
			bvec = new int[fcol.length+2];
			for (int i=0; i<fcol.length; i++) bvec[i] = this.fcol[i];
			bvec[fcol.length] = this.lastTwist.ordinal();
			bvec[fcol.length+1] = this.lastTimes;
			break;
		default: 
			throw new RuntimeException("Unallowed value in switch stateCube");
		}
		return bvec;   
	}
	
	public CubeState clearLast() {
		this.lastTwist = Twist.ID;
		this.lastTimes = 0;
		return this;
	}
	
	public CubeState print() {
		System.out.println(this.toString());
		return this;
	}
	
	public String toString() {
		DecimalFormat form = new DecimalFormat("00");
		String s = "";
		switch(this.type) {
		case TRAFO_P: 
    		for (int i=0; i<fcol.length; i++) {
    			if (i%4==0) s = s + "|";
    			s = s + form.format(fcol[i]);
    		}
    		break;
		default:
    		for (int i=0; i<fcol.length; i++) {
    			if (i%4==0) s = s + "|";
    			s = s + fcol[i];
    		}
    		break;
		}
		s = s + "|";  
		return s;	
	}
	
	/**
	 * 
	 * @return true, if applying {@code this.twistSeq} to the solved cube yields the  
	 * same cube state as stored in {@code this.fcol}.<br>
	 * If {@code this.twistSeq=""} (not known), then return always true. 
	 */
	public boolean assertTwistSequence() {
		CubeState tst = new CubeState();
		Twist T=Twist.ID;
		int times;
		String tw = this.twistSeq;
		if (tw.equals("")) // 'this' is from color transformation, we cannot perform check:  
			return true;
//		if (twistSeq.equals("L2U1")) {
//			int dummy=1;
//		}
		while(tw.length()>0) {
			if (tw.startsWith("U")) T=Twist.U;
			if (tw.startsWith("L")) T=Twist.L;
			if (tw.startsWith("F")) T=Twist.F;
			assert (tw.length()>1);
			times = (int)(tw.charAt(1)-48);
			assert (1<=times && times<=3);
			switch(T) {
			case U: tst.UTw(times); break;
			case L: tst.LTw(times); break;
			case F: tst.FTw(times); break;
			}
			tw =  (tw.length()>2) ? tw.substring(2,tw.length()) : "";				
		}
		if (this.equals(tst)) return true;
		return false; 
	}
	
	/**
	 * Checks whether elements of members fcol and type are the same in {@code this} and {@code other}.
	 * (This differs from {@link Object#equals(Object)}, since the latter tests, whether 
	 * the objects are the same, not their content.)
	 */
	public boolean isEqual(CubeState other) {
		if (this.type!=other.type) return false;
		for (int i=0; i<fcol.length; i++) {
			if (this.fcol[i]!=other.fcol[i]) return false;
		}     		
		return true;
	}
	
	/**
	 * It is important that {@link Object#equals(Object)} is overwritten here, so that objects
	 * of class CubeState which have the same elements in fcol[] are considered as
	 * equal. The operation equals is the one that HashSet::add() relies on
	 * 
	 * @see #hashCode()
	 * @see CubeStateMap#countDifferentStates()
	 */
	@Override
	public boolean equals(Object other) {
		assert (other instanceof CubeState) : "Object other is not of class CubeState";
		return isEqual((CubeState) other);
	}
	
	/**
	 * Like with {@link CubeState#equals(Object)}, it is equally important that {@link Object#hashCode()} is overwritten here in such a way
	 * that it returns the same hash code for objects with the same content. 
	 * Since the equality check for inserting an object into a Set (HashSet) is based on 
	 * sameness of equals() AND hashCode() (!!)  
	 * <p> 
	 * See <a href="https://stackoverflow.com/questions/6187294/java-set-collection-override-equals-method/11577351">
	 *     https://stackoverflow.com/questions/6187294/java-set-collection-override-equals-method/11577351</a>
	 *     
	 * @see Object#hashCode()    
	 * @see #equals(Object)    
	 */
	@Override
	public int hashCode() {
		return this.toString().hashCode();
	}
} // class CubeState
   


